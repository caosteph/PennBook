<!DOCTYPE html>
<html lang="en">
<head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js" type = "text/javascript"></script>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>

    <script src="http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.4.4.min.js" type="text/javascript"></script>
    <script src="http://ajax.aspnetcdn.com/ajax/jquery.templates/beta1/jquery.tmpl.min.js" type="text/javascript"></script>

    <!-- <link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" /> -->
    <!-- <script defer src="http://localhost:3000/socket.io/socket.io.js"></script> -->
    <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.4.0/socket.io.js" integrity="sha512-nYuHvSAhY5lFZ4ixSViOwsEKFvlxHMU2NHts1ILuJgOS6ptUmAGt/0i5czIgMOahKZ6JN84YFDA+mCdky7dD8A==" crossorigin="anonymous" referrerpolicy="no-referrer"></script> -->
    <!-- <script defer src="/socket.io/socket.io.js"></script> -->
    <script src="/socket.io/socket.io.js"></script>      

    <!-- <script defer src="clientSide.js"></script> -->

    <style>
body{
    background-color: #9ae4a4;
    margin-top:20px;
    margin-left:30px;
    margin-right:30px;
}
.card {
    background: rgb(238, 252, 237);
    transition: .5s;
    border: 5px;
    margin-bottom: 50px;
    /* border-radius: .55rem; */
    position: relative;
    width: 100%;
    /* box-shadow: 0 1px 2px 0 rgb(0 0 0 / 10%); */
}

.chat-app .chat {
    margin-left: 280px;
    border-left: 1px solid #09470d
}


.chat .chat-history {
    padding: 20px;
    border-bottom: 2px solid #fff
}

.chat .chat-history ul {
    padding: 0
}

.chat .chat-history ul li {
    list-style: none;
    margin-bottom: 30px
}

.chat .chat-history ul li:last-child {
    margin-bottom: 0px
}

.chat .chat-history .message-data {
    margin-bottom: 15px
}

/* .chat .chat-history .message-data img {
    border-radius: 40px;
    width: 40px
} */

.chat .chat-history .message-data-time {
    color: #053a0e;
    padding-left: 6px
}

.chat .chat-history .message {
    color: rgb(12, 56, 6);
    font-weight: 100;
    padding: 5px 25px 5px 25px;
    line-height: 26px;
    font-size: 14px;
    border-radius: 10px;
    border-color: #0c32bd;
    display: inline-block;
    position: relative
}


.chat .chat-history .my-message {
    background: #ceeccd
}

/* Adds the little ^ that comes with each chat */
.chat .chat-history .my-message:after {
    bottom: 100%;
    left: 25px;
    border: solid transparent;
    content: " ";
    height: 0;
    width: 0;
    position: absolute;
    /* pointer-events: none; */
    border-bottom-color: #ceeccd;
    border-width: 10px;
    margin-left: -10px
}

.chat .chat-history .other-message {
    background: #75d47a;
    text-align: left 
}

.chat .chat-history .other-message:after {
    border-bottom-color: #02161b;
    left: 93%
}

.chat .chat-history .m-b-0 .clearfix .testing{
    border-bottom-color: #2f636e;
    left: 93%
}
/* COME RIGHT BACK HERE */

.chat .chat-message {
    padding: 20px
}

.float-right {
    float: right
}

.clearfix:after {
    visibility: hidden;
    display: block;
    font-size: 0;
    content: " ";
    clear: both;
    height: 0
}

@media only screen and (max-width: 767px) {
    .chat-app .people-list {
        height: 465px;
        width: 100%;
        overflow-x: auto;
        background: #fff;
        left: -400px;
        display: none
    }
    .chat-app .people-list.open {
        left: 0
    }
    .chat-app .chat {
        margin: 0
    }
    .chat-app .chat .chat-header {
        border-radius: 0.55rem 0.55rem 0 0
    }
    .chat-app .chat-history {
        height: 300px;
        overflow-x: auto
    }
}

@media only screen and (min-width: 768px) and (max-width: 992px) {
    .chat-app .chat-list {
        height: 650px;
        overflow-x: auto
    }
    .chat-app .chat-history {
        height: 600px;
        overflow-x: auto
    }
}

/* @media only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 1) {
    .chat-app .chat-list {
        height: 480px;
        overflow-x: auto
    }
    .chat-app .chat-history {
        height: calc(100vh - 350px);
        overflow-x: auto
    }
} */


/* Added on for the chat-list*/

 /* .chat-app .people-list {
    width: 100px;
    position: absolute;
    left: 0;
    top: 0;
    padding: 5px;
    z-index: 7
} */

.people-list {
    -moz-transition: .5s;
    -o-transition: .5s;
    -webkit-transition: .5s;
    transition: .5s;
    padding: 50px 5px 50px 5px;
}


.people-list .chat-list li {
    /* padding: 8px 8px 8px 8px; */
    padding: 10px 2% 10px 2%;
    border-radius: 10px;
    text-align: center;
    /* float: left */
}

.people-list .chat-list li:hover {
    background: #9ae4a4;
}

.people-list .chat-list li .name {
    font-size: 18px;
    text-align: center;
} 

.chat-app .people-list {
  list-style-type: none;
  margin: 5px;
  padding: 15px;
  overflow: hidden;
}

.people-list .chat-list li {
  float: left;
}

.people-list .chat-list li a {
  display: block;
  color: white;
  text-align: center;
  padding: 16px;
  text-decoration: none;
}


.holdForm {
    padding: 10px 40% 10px 35%;
}

.people-list .chat-list img {
    width: 35px;
    border-radius: 40%
}

.people-list img {
    /* float: left; */
    border-radius: 30%
}

/* .button_to_leave {
    padding: 10px;
    float: right;
    width: 125px;
} */

.button_leave_holder {
    padding: 10px;
    float: right;
    width: 125px;
}

.want_to_add {
    padding: 5px;
}

.choose_friend {
    padding: 5px;
}

/* 

.people-list .status {
    color: #999;
    font-size: 13px
} */

    </style>
</head>


<div class="container">
    <h2 id="first-chat-name">Baeberlen</h2>

<div class="row clearfix">
    <div class="col-lg-12">

        <div class="card chat-app">
            <div class="button_leave_holder">
            <button id="first-button-toLeave" class="button_to_leave" onclick="leaveChat()">Leave Chat</button>
            <button id="first-button-toLeave" class="button_to_leave" onclick="leaveWindow()">Back</button>
             </div>
            <div id="plist" class="people-list">
                <ul class="list-unstyled chat-list mt-2 mb-0">
                    <div id="container-for-users"></div>
                    <!-- <li class="clearfix theList">
                        <img src="https://bootdey.com/img/Content/avatar/avatar1.png" alt="avatar">
                        <div class="about name"> Vincent
                            <div class="name">Vincent</div>
                            <div class="status"> <i class="fa fa-circle offline"></i> Is well endowed </div>                                            
                        </div>
                    </li>
                    <li class="clearfix theList">
                        <img src="https://bootdey.com/img/Content/avatar/avatar2.png" alt="avatar">
                        <div class="about">
                            <div class="name">Aiden </div>
                            <div class="status"> <i class="fa fa-circle online"></i> online </div>
                        </div> -->
                    </li>
                </ul>
            </div>
           
            <div class="chat">
                <div class="chat-history">
                    <ul class="m-b-0">
                        <div id="first-hold-to-send"></div>
                    </ul>
                </div>


                <form id="first-send-message" class="holdForm ">
                    <input type="text" id="first-message">
                <button type="submit" id="first-message-button" class="btn btn-success">Send</button>
                </form>

                <!-- <form>
                    <input type="text">
                    <button type="submit">Friendly</button>
                </form> -->
                <buton>Hmm</buton>
            </div>

        </div>
    </div>
    <ul id="times">hiiiii</ul>    


    <div class="choose_friend" id="first-list-friends" style="visibility:hidden">Choose a friend     </div>
    <div class="want_to_add" id="chat-options-container" style="visibility:hidden">Do you want to add user to this chat or create a new one?</div>
    <button id="first-button-toInvite" onclick="inviteFriend()">Invite Friend</button>
        <div id="first-hold-to-send"></div>
</div>
</div>



<!-- <script type="text/javascript"> -->
<script>

    console.log("HMMMMM bb");
    // $(function () {        
        var socket = io();     
        $.getJSON('/getCurrentUsername', function(data, err) {
              socket.emit('new-person', data);
        });

        socket.on('time', function(time) {          
            $('#times').append($('<li>').text(time));
        });      


        socket.on('person-joined', username => {
            console.log("QUESTION");
            var hold = username + ' has connected';
            addMessage('',hold,'', false);
        })

        // Message is Recieved
        socket.on('message', data => {
            console.log("segsy time" + data);
            addMessage(data.name, data.message, data.mm, false);
        })

        // Person leaves the chat
        socket.on('person-exited', username => {
            console.log("Get HERE?");
            var hold = username + ' has disconnected';
            addMessage('', hold,'', false);
        })    

        // Containers for html to be put inside of
        const input = document.getElementById('first-message')
        const form = document.getElementById('first-send-message')

        // Submit button for a message
        console.log("HERE1");
        form.addEventListener('submit', e => {
            $.getJSON('/getTime', function(data2, err2) {
                var date = data2;
                console.log("HERE2");
                e.preventDefault();
                const mess = input.value;
                $.getJSON('/getCurrentUsername', function(data, err) {
                    console.log("HERE3");
                    socket.emit('send-message', {mess:mess, date: date, username: data});
                });
                input.value = '';
                var wholeMess = "You: " + mess;
                addMessage('You', mess, '', true);

                // var arr = {};
                // arr.message = holdID;
                // const queryString = window.location.search;
                // const urlParams = new URLSearchParams(queryString);
                // const product = urlParams.get('chatID');
                // arr.chat
                // $.post('/addChatMessage', arr,  function(data) {
                // }, "json");
            });

        })




    // });    





    //     // Message is sent
    // socket.on('message', data => {
    //     console.log("segsy time" + data);
    //     addMessage(data.name, data.message, data.mm, false);
    // })

    // // Person Joins the chat
    // socket.on('person-joined', username => {
    //     var hold = username + ' has connected';
    //     addMessage('',hold,'', false);
    // })

    // // Person leaves the chat
    // socket.on('person-exited', username => {
    //     console.log("Get HERE?");
    //     var hold = username + ' has disconnected';
    //     addMessage('', hold,'', false);
    // })

    // // Containers for html to be put inside of
    // const input = document.getElementById('first-message')
    // const form = document.getElementById('first-send-message')

    // // Submit button for a message
    // form.addEventListener('submit', e => {
    //     e.preventDefault();
    //     const mess = input.value;
    //     socket.emit('send-message', {mess:mess, time:"time"});
    //     input.value = '';
    //     var wholeMess = "You: " + mess;
    //     addMessage('You', mess, '', true);
    // })


    // const { io } = require("socket.io-client");
    // const websocket = io('http://localhost:3000', { transports : ['websocket'] });


    // const websocket = io();
    // console.log("hi");
    // websocket.emit('new-person');

    // // Message is sent
    // socket.on('message', data => {
    //     console.log("segsy time" + data);
    //     addMessage(data.name, data.message, data.mm, false);
    // })

    // // Person Joins the chat
    // socket.on('person-joined', username => {
    //     var hold = username + ' has connected';
    //     addMessage('',hold,'', false);
    // })

    // // Person leaves the chat
    // socket.on('person-exited', username => {
    //     console.log("Get HERE?");
    //     var hold = username + ' has disconnected';
    //     addMessage('', hold,'', false);
    // })

    // // Containers for html to be put inside of
    // const input = document.getElementById('first-message')
    // const form = document.getElementById('first-send-message')

    // // Submit button for a message
    // form.addEventListener('submit', e => {
    //     e.preventDefault();
    //     const mess = input.value;
    //     socket.emit('send-message', {mess:mess, time:"time"});
    //     input.value = '';
    //     var wholeMess = "You: " + mess;
    //     addMessage('You', mess, '', true);
    // })




    // Holds all of the friends
    var listFriends = [];
    var testing = '';
    let loadUsers = function(holdID) {
        const userListContainer = document.getElementById('container-for-users');
        var arr = {};
        arr.testing = holdID;
        // Sends the groupchat name
        $.post("/chatDataHelper", arr, function(data) {

        }, "json");
        // Creates all of the HTML needed to crease the list of users
        $.get("/getChatUsers", 'bozo', function(data)  {
            for (var i = 0; i < data.messages.length; i++) {
                console.log("User" + i + ": " + data.messages[i].S);
                var member = data.messages[i].S;
                const userData = document.createElement('li');
                userData.className = "clearfix theList";
                const toBeAdded = document.createElement('div');
                toBeAdded.className = "about name";
                toBeAdded.innerText = data.messages[i].S;
                userData.appendChild(toBeAdded);
                userListContainer.append(userData);
            }
        }, "json");
    }

    // Global Variable that holds that chatID
    var globalChatID = '';

    // Loads all of the messages from the database
    let loadMessages = function(holdID) {
        var arr = {};
        arr.testing = holdID;
        // Sends the groupchat name
        $.post("/chatDataHelper", arr, function(data) {

        }, "json");
        // Gets all of the Chat Data

        $.get("/chatData", 'bozo', function(data)  {
            for (var i = 0; i < data.messages.length; i++) {
                console.log("Message: " + data.messages[i].S);
                var listMess = JSON.parse(data.messages[i].S);
                console.log(listMess[i]);
                var messvalue = listMess[i].message;
                var messName = listMess[i].username;
                var messTime = listMess[i].time;
                addMessage(messName, messvalue, messTime, false);
            }
        }, "json");
    }

    // Called from websocket when we want to add a message
    // Mine indicates a boolean (true if I sent it, false otherwise)
    function addMessage(sender, mess,time,  mine) {
        const container = document.getElementById('first-hold-to-send');
        if (!mine) {
            const clearfix = document.createElement('li');
            clearfix.className = "clearfix";
            const messData = document.createElement('div');
            messData.className = "message-data";
            const mess_time = document.createElement('span');
            mess_time.className = "message-data-time";
            mess_time.innerText = "";
            if (time != "") {
                mess_time.innerText = sender + "  (" + time + ")";
            }
            const message1 = document.createElement('div');
            message1.className = "message my-message";
            message1.innerText = mess;
            clearfix.appendChild(messData);
            messData.appendChild(mess_time);
            clearfix.appendChild(message1);
            container.append(clearfix);
        } else {
            const clearfix = document.createElement('li');
            clearfix.className = "clearfix";
            const messData = document.createElement('div');
            messData.className = "message-data text-right";
            const mess_time = document.createElement('span');
            mess_time.className = "message-data-time";
            mess_time.innerText = "";
            if (time!="") {
                mess_time.innerText = sender + "  (" + time + ")";;
            }
            const message1 = document.createElement('div');
            message1.className = "message other-message float-right";
            message1.innerText = mess;
            clearfix.appendChild(messData);
            messData.appendChild(mess_time);
            clearfix.appendChild(message1);
            container.append(clearfix);
        }
    }

    function leaveWindow() {
        window.location.href = '/home';
    }

    function leaveChat() {
        var arr = {};
        arr.testing = globalChatID;
        // Remove the chat from the users list of chats
        $.post("/removeChatFromUser", arr, function(data) {

        }, "json");
        setTimeout(function() {
            websocket.emit('person-left', "A user");
            window.location.href = '/home';
        },500);
    }

    // This code is run everytime that a user comes into this page
    $(document).ready(function () {
        const queryString1 = window.location.search;
        const urlParams1 = new URLSearchParams(queryString1);
        const product1 = urlParams1.get('chatID');
        console.log("PRODUCT" + product1);
        // Load the messages into the current state
        loadMessages(product1);
        // Load the users into the current state
        loadUsers(product1);
        addMessage('','You Joined','', true);
        globalChatID = product1;
        // var usernameHolder = '';
        // $.getJSON('/getCurrentUsername', function(data, err) {
        //     usernameHolder = data;
        // });
        // console.log("THE ROCKKKKK: " +  usernameHolder);
    })

    // Code that gets run when inviting a friend to join the given chat
    function inviteFriend() {
        console.log(listFriends);
        if (document.getElementById('first-list-friends').style.visibility != 'visible') {
            $.getJSON("/getFriends", function(data, err) {
                if(data) {
                    var listFriends = [];
                    console.log("daddy: " + data);
                    data.forEach((comment) => {
                        console.log("Bruce: " + comment.friend2.S); 
                        listFriends.push(comment.friend2.S);
                    })
                    const listFriendsContainer = document.getElementById('first-list-friends');
                    listFriends.forEach(function(friend) {
                        const queryString = window.location.search;
                        const urlParams = new URLSearchParams(queryString);
                        var product = urlParams.get('chatID');
                        const friendElm = document.createElement('button');
                        friendElm.onclick = function(){hideFriendOptions(friend, product);return false;};
                        // friendElm.setAttribute("onclick", "hideFriendOptions(friend)");
                        friendElm.setAttribute("class", "friendsToInvite");
                        friendElm.innerText = friend;
                        listFriendsContainer.append(friendElm);
                        console.log(friend);
                    });
                    document.getElementById('first-list-friends').style.visibility = 'visible';
                }
            });
        }
    }

    // Helper function for inviting a friend to join the chat
    function hideFriendOptions(friend, product) {
        inviteUser(friend, product);
        document.getElementById('first-list-friends').style.visibility = 'hidden';
        listFriends = ['John', 'Frank'];
        var elements = document.getElementById('first-list-friends').getElementsByClassName("friendsToInvite");
        console.log(elements);
        console.log(elements.length);
        for (var i = elements.length - 1; i >=0; i--) {
            console.log(elements[i]);
            elements[i].remove();
        }
    }

    // Helper function for inviting a friend to join the chat
    function inviteUser(friend, product) {
        console.log("THE FRIEND: " + friend);
        var holda = {};
        holda.element = product;
        holda.element2 = friend;
        $.post('/addChatToRequestList', holda, function(dd) {
                                                            
        })
        const chatOptionsContainer = document.getElementById('chat-options-container');            
        const friendElm = document.createElement('button');
        friendElm.setAttribute("onclick", "inivteThisChat()");
        friendElm.setAttribute("class", "chooseAddToThisChat");
        friendElm.innerText = "Keep Chat";
        chatOptionsContainer.append(friendElm);

        const friendElm2 = document.createElement('button');
        friendElm2.setAttribute("onclick", "inivteThisChat()");
        friendElm2.setAttribute("class", "chooseAddToThisChat");
        friendElm2.innerText = "Create New Chat";
        chatOptionsContainer.append(friendElm2);
        document.getElementById('chat-options-container').style.visibility = 'visible';
    }

    // Helper function for inviting a friend to join the chat
    function inivteThisChat() {
        document.getElementById('chat-options-container').style.visibility = 'hidden';
        var elements = document.getElementById('chat-options-container').getElementsByClassName("chooseAddToThisChat");
        console.log(elements);
        console.log(elements.length);
        for (var i = elements.length - 1; i >=0; i--) {
            console.log(elements[i]);
            elements[i].remove();
        }
    }
    
</script>